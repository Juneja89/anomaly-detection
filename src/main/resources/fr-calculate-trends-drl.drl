import com.oaknorth.drools.RatioValue;
import com.oaknorth.drools.Record;
import java.util.List;

rule "calculate overall trend highlight increase positive case"
lock-on-active
salience "100"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "increasing" , ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) > 0.0 ), anomalyList : anomaly) from $recordList
        
    then
        anomalyList.add(1);
        update(finance);
end

rule "calculate overall trend highlight increase negative case"
lock-on-active
salience "90"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "increasing",  ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) < 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(0);
        update(finance);
end

rule "calculate overall trend highlight decrease positive case"
lock-on-active
salience "80"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) < 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(1);
       update(finance);
end

rule "calculate ovreall trend highlight decrease negative case"
lock-on-active
salience "70"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) > 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(0);
        update(finance);
end

rule "calculate recent trend highlight increase positive case"
lock-on-active
salience "60"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "increasing",  ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) > 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(1);
        update(finance);
end

rule "calculate recent trend highlight increase negative case"
lock-on-active
salience "50"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "increasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) < 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(0);
        update(finance);
end

rule "calculate recent trend highlight decrease positive case"
lock-on-active
salience "40"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) < 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(1);
        update(finance);
end

rule "calculate recent trend highlight decrease negative case"
lock-on-active
salience "30"
    when
        finance : FinanceData($recordList : records)
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) > 0.0 ), anomalyList : anomaly) from $recordList
    then
        anomalyList.add(0);
        update(finance);
end

//from row number: 1
rule "Row 1 calculate absolute anomaly of last year"
	dialect "mvel"
	no-loop
	lock-on-active
	salience "20"
	when
	    finance : FinanceData($recordList : records)
		$record : Record( ratioName == "Adjusted Gross Leverage",  (ratioValues.get(ratioValues.size() - 1).getData() >= 4.0)) from $recordList
	
	then
    	$record.getAnomaly().add(1);
	   update(finance);
end

//from row number: 1
rule "Row 2 calculate absolute anomaly of last year"
	dialect "mvel"
	no-loop
	lock-on-active
	salience "10"
	when
	    finance : FinanceData($recordList : records)
		$record : Record( ratioName == "Adjusted Gross Leverage",  (ratioValues.get(ratioValues.size() - 1).getData() < 4.0)) from $recordList
	
	then
    	$record.getAnomaly().add(0);
	   update(finance);
end
