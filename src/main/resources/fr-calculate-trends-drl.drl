import com.oaknorth.drools.RatioValue;
import com.oaknorth.drools.Record;
import java.util.List;

rule "calculate overall trend highlight increase positive case"
lock-on-active
    when
        record : Record(trend == "increasing" , ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) > 0.0 ))
        
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(1);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate overall trend highlight increase negative case"
lock-on-active
    when
        record : Record(trend == "increasing",  ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) < 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(0);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate recent trend highlight increase positive case"
lock-on-active
    when
        record : Record(trend == "increasing",  ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) > 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(1);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate recent trend highlight increase negative case"
lock-on-active
    when
        record : Record(trend == "increasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) < 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(0);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate overall trend highlight decrease positive case"
lock-on-active
    when
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) < 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(1);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate ovreall trend highlight decrease negative case"
lock-on-active
    when
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(0).getData()) > 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(0);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate recent trend highlight decrease positive case"
lock-on-active
    when
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) < 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(1);
        modify(record){
            setAnomaly(anomaly);
        }
end

rule "calculate recent trend highlight decrease negative case"
lock-on-active
    when
        record : Record(trend == "decreasing", ((ratioValues.get(ratioValues.size() - 1).getData() -  ratioValues.get(ratioValues.size() - 2).getData()) > 0.0 ))
    then
        List<Integer> anomaly = record.getAnomaly();
        anomaly.add(0);
        modify(record){
            setAnomaly(anomaly);
        }
end